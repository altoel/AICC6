/* 1. container box에 grid 속성값이 지정되면 grid 박스로 개념이 생성되고, 아무 변경 사항이 없다. */
/* 2. grid-template-columns 속성에 값을 지정하면 가로로 박스가 생성된다. fr은 fraction의 약어로 가로 크기의 비율에 따라 item 요소들이 배치된다. */
/* 3. grid-template-rows 속성에 값을 지정하면 세로로 박스가 생성된다. 일반적으로 고정 값을 사용하며, 몇 줄일지 모를 경우 minmax 함수를 이용하여 높이를 맞춘다. */
/* 4. 간격은 gap 속성을 이용한다. column-gap, row-gap이 있지만, grid 박스의 경우 요소 크기가 일괄될 때 많이 사용하므로 열과 행 모두 지정하는 gap을 사용한다.*/


.container {
   display: grid;

   /* 두 문장은 같은 의미 */
   _grid-template-columns: 1fr 1fr 1fr 1fr;
   grid-template-columns: repeat(4, 1fr);
   _grid-template-rows: 100px 100px 100px;
   grid-auto-rows: minmax(100px, auto);
   gap: 5px;
}

.item {
   border: 1px solid;
}

/* 5. grid 박스를 합칠 경우 grid-row-start와 grid-row-end값을 조정한다 */
/* .item:nth-child(1) {
   grid-row-start: 1;
   grid-row-end: 3;
   grid-column-start: 1;
   grid-column-end: 3;
}
.item:nth-child(3) {
   grid-row-start: 3;
   grid-row-end: 5;
   grid-column-start: 1;
   grid-column-end: 3;
} */
/* row 1과 2를 합침(두 칸) */

/* 6. grid-row, grid-column 속성의 값을 변경하면 예측 가능한 요소 합치기가 가능해 편하다 */
/* .item:nth-child(1) {
   grid-column: span 2;
   grid-row: span 2;
}

.item:nth-child(3) {
   grid-row: span 3;
} */